/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'zhouxh' at '4/13/16 10:13 AM' with Gradle 2.8
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

mainClassName = "examples.Main"

run {
  if ( project.hasProperty("appArgs") ) {
    args Eval.me(appArgs)
  }
  standardInput = System.in
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    // Note: you have to create a $HOME/.gradle/gradle.properties
    // to contain 
    // pivotalUsername=xxxx
    // pivotalPassword=yyyy
    mavenLocal()
    jcenter()
    maven {
      url 'https://commercial-repo.pivotal.io/data3/gemfire-release-repo/gemfire'
      credentials {
                username "$gemfireReleaseRepoUser"
                password "$gemfireReleaseRepoPassword"
        // username "$pivotalUsername"
        // password "$pivotalPassword"
      }
    }

    // maven { url "https://repository.apache.org/content/repositories/snapshots" }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // If using release verson in maven (geode 1.3.0)
    // compile "org.apache.geode:geode-core:1.3.0"
    // compile "org.apache.geode:geode-lucene:1.3.0"

    // If using support version (gemfire 9.2.0)
    // compile "io.pivotal.gemfire:geode-core:9.2.0"
    // compile "io.pivotal.gemfire:geode-lucene:9.2.0"

    // If using develop version (geode 1.8.0)
    compile "org.apache.geode:geode-core:1.8.0-SNAPSHOT"
    compile "org.apache.geode:geode-lucene:1.8.0-SNAPSHOT"

    // third party 
    compile "org.springframework.shell:spring-shell:1.2.0.RELEASE"
    compile "org.springframework:spring-core:4.3.6.RELEASE"
    compile "org.slf4j:slf4j-log4j12:1.7.21"
    compile "org.eclipse.jetty:jetty-server:9.3.10.v20160621"
    compile "org.eclipse.jetty:jetty-webapp:9.3.10.v20160621"
    compile "org.eclipse.jetty:jetty-util:9.3.10.v20160621"
    compile "org.eclipse.jetty:jetty-io:9.3.10.v20160621"
    compile "org.eclipse.jetty:jetty-http:9.3.10.v20160621"
    compile "org.eclipse.jetty:jetty-security:9.3.10.v20160621"
    compile "org.eclipse.jetty:jetty-xml:9.3.10.v20160621"
    compile "org.eclipse.jetty:jetty-servlet:9.3.10.v20160621"

    // for nested object
    compile "org.apache.lucene:lucene-join:6.4.1"
    compile "org.apache.lucene:lucene-grouping:6.4.1"

    // for soundex analyzer
    // compile "org.apache.lucene:lucene-analyzers-phonetic:6.4.1"
    // compile "commons-codec:commons-codec:1.10"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

jar {
    baseName = 'numeric_demo'
    version = '0.0.1'
}

task fatJar(type: Jar) {
    baseName = 'lucene_example_all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

